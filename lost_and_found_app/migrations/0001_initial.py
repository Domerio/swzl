# Generated by Django 5.1.6 on 2025-02-24 16:00

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(max_length=20, unique=True, verbose_name="学号/工号"),
                ),
                ("real_name", models.CharField(max_length=20, verbose_name="真实姓名")),
                (
                    "role",
                    models.CharField(
                        choices=[("student", "学生"), ("staff", "教职工"), ("admin", "管理员")],
                        default="student",
                        max_length=10,
                        verbose_name="角色",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=11, null=True, verbose_name="联系电话"
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True, null=True, upload_to="avatars/", verbose_name="头像"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="认证状态"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "用户",
                "verbose_name_plural": "用户",
                "permissions": [
                    ("manage_content", "可以管理所有内容"),
                    ("view_statistics", "可以查看统计报表"),
                ],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20, verbose_name="分类名称")),
                (
                    "item_type",
                    models.CharField(
                        choices=[("lost", "失物"), ("found", "招领")],
                        max_length=5,
                        verbose_name="分类类型",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="图标样式"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lost_and_found_app.category",
                        verbose_name="父级分类",
                    ),
                ),
            ],
            options={
                "verbose_name": "物品分类",
                "verbose_name_plural": "物品分类",
            },
        ),
        migrations.CreateModel(
            name="LostAndFound",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(default=False, verbose_name="匿名发布"),
                ),
                ("title", models.CharField(max_length=50, verbose_name="标题")),
                ("description", models.TextField(verbose_name="详细描述")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "待审核"),
                            ("active", "进行中"),
                            ("completed", "已完成"),
                            ("expired", "已过期"),
                        ],
                        default="pending",
                        max_length=10,
                        verbose_name="状态",
                    ),
                ),
                (
                    "result",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("unclaimed", "未认领"),
                            ("returned", "已归还"),
                            ("invalid", "信息无效"),
                        ],
                        max_length=10,
                        null=True,
                        verbose_name="处理结果",
                    ),
                ),
                ("lost_time", models.DateTimeField(verbose_name="丢失/拾取时间")),
                ("location", models.CharField(max_length=100, verbose_name="地点")),
                (
                    "location_lat",
                    models.FloatField(blank=True, null=True, verbose_name="纬度"),
                ),
                (
                    "location_lng",
                    models.FloatField(blank=True, null=True, verbose_name="经度"),
                ),
                ("contact", models.CharField(max_length=50, verbose_name="联系方式")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="lost_and_found_app.category",
                        verbose_name="物品分类",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="关联用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "失物招领信息",
                "verbose_name_plural": "失物招领信息",
            },
        ),
        migrations.CreateModel(
            name="Bookmark",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmarks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="lost_and_found_app.lostandfound",
                    ),
                ),
            ],
            options={
                "verbose_name": "用户收藏",
                "verbose_name_plural": "用户收藏",
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="lost_found/%Y/%m/", verbose_name="物品图片"
                    ),
                ),
                ("is_primary", models.BooleanField(default=False, verbose_name="主图")),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="lost_and_found_app.lostandfound",
                    ),
                ),
            ],
            options={
                "verbose_name": "附件管理",
                "verbose_name_plural": "附件管理",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(verbose_name="通知内容")),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("system", "系统通知"),
                            ("match", "信息匹配"),
                            ("reminder", "进度提醒"),
                        ],
                        default="system",
                        max_length=10,
                    ),
                ),
                ("is_read", models.BooleanField(default=False, verbose_name="已读状态")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="生成时间"),
                ),
                (
                    "related_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="lost_and_found_app.lostandfound",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="接收用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "消息通知",
                "verbose_name_plural": "消息通知",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50, verbose_name="报表标题")),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("daily", "日报"),
                            ("weekly", "周报"),
                            ("monthly", "月报"),
                            ("custom", "自定义分析"),
                        ],
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateField(verbose_name="开始日期")),
                ("end_date", models.DateField(verbose_name="结束日期")),
                ("content", models.JSONField(verbose_name="统计内容")),
                (
                    "generated_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="生成时间"),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="生成人",
                    ),
                ),
            ],
            options={
                "verbose_name": "统计报表",
                "verbose_name_plural": "统计报表",
            },
        ),
        migrations.AddIndex(
            model_name="lostandfound",
            index=models.Index(
                fields=["status", "created_at"], name="lost_and_fo_status_daf4e1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bookmark",
            unique_together={("user", "item")},
        ),
    ]
